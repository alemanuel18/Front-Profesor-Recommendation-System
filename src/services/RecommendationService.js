// @ Front-Profesor-Recommendation-System
// @ File Name : RecommendationService.js
// @ Date : 21/05/2025
// @ Author : Marcelo Detlefsen

/**
 * Servicio de Recomendaciones
 * 
 * Este servicio maneja todas las operaciones relacionadas con el sistema de recomendaciones,
 * incluyendo la obtenci√≥n de recomendaciones personalizadas y el registro de aprobaciones.
 */

import apiService from './apiService';

class RecommendationService {
  
  /**
   * Obtiene recomendaciones personalizadas para un estudiante
   * @param {string} studentName - Nombre del estudiante
   * @param {number|null} limit - L√≠mite de recomendaciones a obtener
   * @returns {Promise<Array>} Lista de recomendaciones
   */
  async getRecommendationsForStudent(studentName, limit = null) {
    try {
      console.log(`üîç Obteniendo recomendaciones para: ${studentName}`);
      
      const response = await apiService.getRecomendaciones(studentName, limit);
      
      if (response.success && response.data) {
        const recommendations = response.data.map(rec => ({
          id: rec.profesor_id || rec.nombre,
          professorName: rec.nombre || rec.profesor_nombre,
          compatibilityScore: rec.puntuacion_compatibilidad || rec.score || 0,
          department: rec.departamento || 'Sin especificar',
          teachingStyle: rec.estilo_ense√±anza || 'Sin especificar',
          classStyle: rec.estilo_clase || 'Sin especificar',
          rating: rec.evaluacion_docente || 0,
          experience: rec.a√±os_experiencia || 0,
          approvalRate: rec.porcentaje_aprobados || 0,
          availability: rec.disponibilidad || 0,
          totalScore: rec.puntuacion_total || 0,
          reasons: rec.razones_recomendacion || this.generateRecommendationReasons(rec),
          image: rec.imagen || "/api/placeholder/150/150"
        }));

        // Ordenar por puntuaci√≥n de compatibilidad
        recommendations.sort((a, b) => b.compatibilityScore - a.compatibilityScore);
        
        console.log(`‚úÖ Se obtuvieron ${recommendations.length} recomendaciones`);
        return recommendations;
      }
      
      console.warn('‚ö†Ô∏è No se encontraron recomendaciones, usando datos mock');
      return this.getMockRecommendations(studentName);
      
    } catch (error) {
      console.error('‚ùå Error obteniendo recomendaciones:', error);
      
      // En caso de error, devolver recomendaciones mock
      return this.getMockRecommendations(studentName);
    }
  }

  /**
   * Registra que un estudiante aprob√≥ un curso con un profesor espec√≠fico
   * @param {string} studentName - Nombre del estudiante
   * @param {string} professorName - Nombre del profesor
   * @param {string} courseCode - C√≥digo del curso
   * @returns {Promise<boolean>} True si se registr√≥ correctamente
   */
  async registerCourseApproval(studentName, professorName, courseCode) {
    try {
      console.log(`üìù Registrando aprobaci√≥n: ${studentName} - ${professorName} - ${courseCode}`);
      
      const response = await apiService.registrarAprobacion(studentName, professorName, courseCode);
      
      if (response.success) {
        console.log('‚úÖ Aprobaci√≥n registrada exitosamente');
        return true;
      }
      
      console.warn('‚ö†Ô∏è Error en el registro de aprobaci√≥n');
      return false;
      
    } catch (error) {
      console.error('‚ùå Error registrando aprobaci√≥n:', error);
      throw new Error(`Error al registrar aprobaci√≥n: ${error.message}`);
    }
  }

  /**
   * Obtiene profesores recomendados para un curso espec√≠fico
   * @param {string} studentName - Nombre del estudiante
   * @param {string} courseCode - C√≥digo del curso
   * @param {number|null} limit - L√≠mite de profesores a obtener
   * @returns {Promise<Array>} Lista de profesores recomendados para el curso
   */
  async getRecommendationsForCourse(studentName, courseCode, limit = null) {
    try {
      // Primero obtener todas las recomendaciones del estudiante
      const allRecommendations = await this.getRecommendationsForStudent(studentName);
      
      // Filtrar por curso si es necesario (esto depender√≠a de c√≥mo est√© estructurada tu API)
      // Por ahora devolvemos todas las recomendaciones
      let courseRecommendations = allRecommendations;
      
      // Aplicar l√≠mite si se especifica
      if (limit && limit > 0) {
        courseRecommendations = courseRecommendations.slice(0, limit);
      }
      
      console.log(`üìö Recomendaciones para curso ${courseCode}: ${courseRecommendations.length}`);
      return courseRecommendations;
      
    } catch (error) {
      console.error('‚ùå Error obteniendo recomendaciones para curso:', error);
      return [];
    }
  }

  /**
   * Genera razones de recomendaci√≥n basadas en los datos del profesor
   * @param {Object} professorData - Datos del profesor
   * @returns {Array<string>} Lista de razones de recomendaci√≥n
   */
  generateRecommendationReasons(professorData) {
    const reasons = [];
    
    if (professorData.evaluacion_docente >= 4.5) {
      reasons.push("Excelente evaluaci√≥n docente");
    }
    
    if (professorData.porcentaje_aprobados >= 80) {
      reasons.push("Alto porcentaje de aprobaci√≥n");
    }
    
    if (professorData.a√±os_experiencia >= 10) {
      reasons.push("Amplia experiencia docente");
    }
    
    if (professorData.estilo_ense√±anza) {
      reasons.push(`Estilo de ense√±anza compatible: ${professorData.estilo_ense√±anza}`);
    }
    
    if (professorData.disponibilidad >= 30) {
      reasons.push("Buena disponibilidad horaria");
    }
    
    return reasons.length > 0 ? reasons : ["Profesor recomendado por el sistema"];
  }

  /**
   * Datos mock para desarrollo y fallback
   * @param {string} studentName - Nombre del estudiante
   * @returns {Array} Lista de recomendaciones mock
   */
  getMockRecommendations(studentName) {
    return [
      {
        id: "1",
        professorName: "DR. GONZALEZ LOPEZ, MARIA ELENA",
        compatibilityScore: 95.5,
        department: "Matem√°ticas",
        teachingStyle: "visual",
        classStyle: "teorica",
        rating: 4.8,
        experience: 12,
        approvalRate: 85,
        availability: 40,
        totalScore: 85.5,
        reasons: [
          "Estilo de ense√±anza compatible con tu perfil",
          "Excelente evaluaci√≥n docente (4.8/5)",
          "Alto porcentaje de aprobaci√≥n (85%)"
        ],
        image: "/api/placeholder/150/150"
      },
      {
        id: "2",
        professorName: "DR. HERNANDEZ MORALES, LUIS FERNANDO",
        compatibilityScore: 92.3,
        department: "Matem√°ticas",
        teachingStyle: "visual",
        classStyle: "teorica",
        rating: 4.9,
        experience: 15,
        approvalRate: 90,
        availability: 25,
        totalScore: 92.3,
        reasons: [
          "Excelente puntuaci√≥n general (92.3)",
          "Muy alta evaluaci√≥n docente (4.9/5)",
          "Amplia experiencia (15 a√±os)"
        ],
        image: "/api/placeholder/150/150"
      },
      {
        id: "3",
        professorName: "LIC. MARTINEZ FLORES, ANA SOFIA",
        compatibilityScore: 88.7,
        department: "Estad√≠stica",
        teachingStyle: "auditivo",
        classStyle: "mixta",
        rating: 4.6,
        experience: 6,
        approvalRate: 82,
        availability: 30,
        totalScore: 80.1,
        reasons: [
          "Clase mixta adecuada para tu estilo",
          "Buena disponibilidad horaria",
          "Buen porcentaje de aprobaci√≥n"
        ],
        image: "/api/placeholder/150/150"
      }
    ];
  }

  /**
   * Verifica el estado de salud del servicio de recomendaciones
   * @returns {Promise<boolean>} True si el servicio est√° funcionando
   */
  async healthCheck() {
    try {
      const response = await apiService.healthCheck();
      return response.success;
    } catch (error) {
      console.error('‚ùå Error en health check:', error);
      return false;
    }
  }
}

// Exportar una instancia √∫nica del servicio
export default new RecommendationService();